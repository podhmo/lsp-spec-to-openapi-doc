[
  {
    "type": "section",
    "title": "# Language Server Protocol",
    "content": [
      [
        {
          "type": "section",
          "title": "## Base Protocol",
          "content": [
            [
              {
                "type": "section",
                "title": "### Example:",
                "content": [
                  {
                    "type": "code",
                    "language": "",
                    "lines": [
                      "Content-Length: ...\\r\\n\n",
                      "\\r\\n\n",
                      "{\n",
                      "\t\"jsonrpc\": \"2.0\",\n",
                      "\t\"id\": 1,\n",
                      "\t\"method\": \"textDocument/didOpen\", \n",
                      "\t\"params\": {\n",
                      "\t\t...\n",
                      "\t}\n",
                      "}\n"
                    ],
                    "description": [
                      "/**\n",
                      " * \n",
                      " */\n"
                    ]
                  }
                ]
              },
              {
                "type": "section",
                "title": "### Base Protocol JSON structures",
                "content": [
                  [
                    {
                      "type": "section",
                      "title": "#### Abstract Message",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Message {\n",
                            "\tjsonrpc: string;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A general message as defined by JSON-RPC. The language server protocol always uses \"2.0\" as the jsonrpc version.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### RequestMessage",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface RequestMessage extends Message {\n",
                            "\n",
                            "\t/**\n",
                            "\t * The request id.\n",
                            "\t */\n",
                            "\tid: number | string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The method to be invoked.\n",
                            "\t */\n",
                            "\tmethod: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The method's params.\n",
                            "\t */\n",
                            "\tparams?: any\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A request message to describe a request between the client and the server. Every processed request must send a response back to the sender of the request.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Response Message",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ResponseMessage extends Message {\n",
                            "\t/**\n",
                            "\t * The request id.\n",
                            "\t */\n",
                            "\tid: number | string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The result of a request. This can be omitted in\n",
                            "\t * the case of an error.\n",
                            "\t */\n",
                            "\tresult?: any;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The error object in case a request fails.\n",
                            "\t */\n",
                            "\terror?: ResponseError<any>;\n",
                            "}\n",
                            "\n",
                            "interface ResponseError<D> {\n",
                            "\t/**\n",
                            "\t * A number indicating the error type that occurred.\n",
                            "\t */\n",
                            "\tcode: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * A string providing a short description of the error.\n",
                            "\t */\n",
                            "\tmessage: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * A Primitive or Structured value that contains additional\n",
                            "\t * information about the error. Can be omitted.\n",
                            "\t */\n",
                            "\tdata?: D;\n",
                            "}\n",
                            "\n",
                            "export namespace ErrorCodes {\n",
                            "\texport const ParseError: number = -32700;\n",
                            "\texport const InvalidRequest: number = -32600;\n",
                            "\texport const MethodNotFound: number = -32601;\n",
                            "\texport const InvalidParams: number = -32602;\n",
                            "\texport const InternalError: number = -32603;\n",
                            "\texport const serverErrorStart: number = -32099;\n",
                            "\texport const serverErrorEnd: number = -32000;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Response Message sent as a result of a request.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Notification Message",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface NotificationMessage extends Message {\n",
                            "\t/**\n",
                            "\t * The method to be invoked.\n",
                            "\t */\n",
                            "\tmethod: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The notification's params.\n",
                            "\t */\n",
                            "\tparams?: any\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A notification message. A processed notification message must not send a response back. They work like events.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"cancelRequest\"></a> Cancellation Support",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "$/cancelRequest",
                            "params": "`CancelParams` defined as follows:"
                          },
                          "description": ">**New:** The base protocol now offers support for request cancellation. To cancel a request, a notification message with the following properties is sent:"
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface CancelParams {\n",
                            "\t/**\n",
                            "\t * The request id to cancel.\n",
                            "\t */\n",
                            "\tid: number | string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "type": "section",
          "title": "## Language Server Protocol",
          "content": [
            [
              {
                "type": "section",
                "title": "### Basic JSON Structures",
                "content": [
                  [
                    {
                      "type": "section",
                      "title": "#### URI",
                      "content": [
                        {
                          "type": "code",
                          "language": "",
                          "lines": [
                            "  foo://example.com:8042/over/there?name=ferret#nose\n",
                            "  \\_/   \\______________/\\_________/ \\_________/ \\__/\n",
                            "   |           |            |            |        |\n",
                            "scheme     authority       path        query   fragment\n",
                            "   |   _____________________|__\n",
                            "  / \\ /                        \\\n",
                            "  urn:example:animal:ferret:nose\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * URI's are transferred as strings. The URI's format is defined in [http://tools.ietf.org/html/rfc3986](http://tools.ietf.org/html/rfc3986)\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Position",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Position {\n",
                            "\t/**\n",
                            "\t * Line position in a document (zero-based).\n",
                            "\t */\n",
                            "\tline: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * Character offset on a line in a document (zero-based).\n",
                            "\t */\n",
                            "\tcharacter: number;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Position in a text document expressed as zero-based line and character offset. A position is between two characters like an 'insert' cursor in a editor.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Range",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Range {\n",
                            "\t/**\n",
                            "\t * The range's start position.\n",
                            "\t */\n",
                            "\tstart: Position;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The range's end position.\n",
                            "\t */\n",
                            "\tend: Position;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A range in a text document expressed as (zero-based) start and end positions. A range is comparable to a selection in an editor. Therefore the end position is exclusive.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Location",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Location {\n",
                            "\turi: string;\n",
                            "\trange: Range;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Represents a location inside a resource, such as a line inside a text file.\n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Diagnostic",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Diagnostic {\n",
                            "\t/**\n",
                            "\t * The range at which the message applies.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The diagnostic's severity. Can be omitted. If omitted it is up to the\n",
                            "\t * client to interpret diagnostics as error, warning, info or hint.\n",
                            "\t */\n",
                            "\tseverity?: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The diagnostic's code. Can be omitted.\n",
                            "\t */\n",
                            "\tcode?: number | string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * A human-readable string describing the source of this\n",
                            "\t * diagnostic, e.g. 'typescript' or 'super lint'.\n",
                            "\t */\n",
                            "\tsource?: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The diagnostic's message.\n",
                            "\t */\n",
                            "\tmessage: string;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Represents a diagnostic, such as a compiler error or warning. Diagnostic objects are only valid in the scope of a resource.\n",
                            " * \n",
                            " */\n"
                          ]
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "enum DiagnosticSeverity {\n",
                            "\t/**\n",
                            "\t * Reports an error.\n",
                            "\t */\n",
                            "\tError = 1,\n",
                            "\t/**\n",
                            "\t * Reports a warning.\n",
                            "\t */\n",
                            "\tWarning = 2,\n",
                            "\t/**\n",
                            "\t * Reports an information.\n",
                            "\t */\n",
                            "\tInformation = 3,\n",
                            "\t/**\n",
                            "\t * Reports a hint.\n",
                            "\t */\n",
                            "\tHint = 4\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * The protocol currently supports the following diagnostic severities:\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### Command",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface Command {\n",
                            "\t/**\n",
                            "\t * Title of the command, like `save`.\n",
                            "\t */\n",
                            "\ttitle: string;\n",
                            "\t/**\n",
                            "\t * The identifier of the actual command handler.\n",
                            "\t */\n",
                            "\tcommand: string;\n",
                            "\t/**\n",
                            "\t * Arguments that the command handler should be\n",
                            "\t * invoked with.\n",
                            "\t */\n",
                            "\targuments?: any[];\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Represents a reference to a command. Provides a title which will be used to represent a command in the UI. Commands are identitifed using a string identifier and the protocol currently doesn't specify a set of well known commands. So executing a command requires some tool extension code.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### TextEdit",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface TextEdit {\n",
                            "\t/**\n",
                            "\t * The range of the text document to be manipulated. To insert\n",
                            "\t * text into a document create a range where start === end.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The string to be inserted. For delete operations use an\n",
                            "\t * empty string.\n",
                            "\t */\n",
                            "\tnewText: string;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A textual edit applicable to a text document.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### WorkspaceEdit",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface WorkspaceEdit {\n",
                            "\t/**\n",
                            "\t * Holds changes to existing resources.\n",
                            "\t */\n",
                            "\tchanges: { [uri: string]: TextEdit[]; };\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * A workspace edit represents changes to many resources managed in the workspace.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### TextDocumentIdentifier",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface TextDocumentIdentifier {\n",
                            "\t/**\n",
                            "\t * The text document's URI.\n",
                            "\t */\n",
                            "\turi: string;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * Text documents are identified using a URI. On the protocol level, URIs are passed as strings. The corresponding JSON structure looks like this:\n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### TextDocumentItem",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface TextDocumentItem {\n",
                            "\t/**\n",
                            "\t * The text document's URI.\n",
                            "\t */\n",
                            "\turi: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The text document's language identifier.\n",
                            "\t */\n",
                            "\tlanguageId: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The version number of this document (it will strictly increase after each\n",
                            "\t * change, including undo/redo).\n",
                            "\t */\n",
                            "\tversion: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The content of the opened text document.\n",
                            "\t */\n",
                            "\ttext: string;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * >**New:** An item to transfer a text document from the client to the server.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### VersionedTextDocumentIdentifier",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface VersionedTextDocumentIdentifier extends TextDocumentIdentifier {\n",
                            "\t/**\n",
                            "\t * The version number of this document.\n",
                            "\t */\n",
                            "\tversion: number;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * >**New:** An identifier to denote a specific version of a text document.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### TextDocumentPositionParams",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface TextDocumentPositionParams {\n",
                            "\t/**\n",
                            "\t * The text document.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The position inside the text document.\n",
                            "\t */\n",
                            "\tposition: Position;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * >**Changed:** Was `TextDocumentPosition` in 1.0 with inlined parameters\n",
                            " * \n",
                            " * A parameter literal used in requests to pass a text document and a position inside that document.\n",
                            " * \n",
                            " */\n"
                          ]
                        }
                      ]
                    }
                  ]
                ]
              },
              {
                "type": "section",
                "title": "### Actual Protocol",
                "content": [
                  [
                    {
                      "type": "section",
                      "title": "#### <a name=\"initialize\"></a>Initialize Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "initialize",
                            "params": "`InitializeParams` defined as follows:"
                          },
                          "description": "The initialize request is sent as the first request from the client to the server. If the server receives request or notification before the `initialize` request it should act as follows:\n\n* for a request the respond should be errored with `code: -32001`. The message can be picked by the server. \n* notifications should be dropped."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface InitializeParams {\n",
                            "\t/**\n",
                            "\t * The process Id of the parent process that started\n",
                            "\t * the server. Is null if the process has not been started by another process.\n",
                            "\t * If the parent process is not alive then the server should exit (see exit notification) its process.\n",
                            "\t */\n",
                            "\tprocessId?: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The rootPath of the workspace. Is null\n",
                            "\t * if no folder is open.\n",
                            "\t */\n",
                            "\trootPath?: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * User provided initialization options.\n",
                            "\t */\n",
                            "\tinitializationOptions?: any;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The capabilities provided by the client (editor)\n",
                            "\t */\n",
                            "\tcapabilities: ClientCapabilities;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ClientCapabilities {\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`InitializeResult` defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface InitializeResult {\n",
                            "\t/**\n",
                            "\t * The capabilities the language server provides.\n",
                            "\t */\n",
                            "\tcapabilities: ServerCapabilities;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface InitializeError {\n",
                            "\t/**\n",
                            "\t * Indicates whether the client should retry to send the\n",
                            "\t * initialize request after showing the message provided\n",
                            "\t * in the ResponseError.\n",
                            "\t */\n",
                            "\tretry: boolean;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Defines how the host (editor) should sync document changes to the language server.\n",
                            " */\n",
                            "enum TextDocumentSyncKind {\n",
                            "\t/**\n",
                            "\t * Documents should not be synced at all.\n",
                            "\t */\n",
                            "\tNone = 0,\n",
                            "\t/**\n",
                            "\t * Documents are synced by always sending the full content of the document.\n",
                            "\t */\n",
                            "\tFull = 1,\n",
                            "\t/**\n",
                            "\t * Documents are synced by sending the full content on open. After that only incremental \n",
                            "\t * updates to the document are sent.\n",
                            "\t */\n",
                            "\tIncremental = 2\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Completion options.\n",
                            " */\n",
                            "interface CompletionOptions {\n",
                            "\t/**\n",
                            "\t * The server provides support to resolve additional information for a completion item.\n",
                            "\t */\n",
                            "\tresolveProvider?: boolean;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The characters that trigger completion automatically.\n",
                            "\t */\n",
                            "\ttriggerCharacters?: string[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Signature help options.\n",
                            " */\n",
                            "interface SignatureHelpOptions {\n",
                            "\t/**\n",
                            "\t * The characters that trigger signature help automatically.\n",
                            "\t */\n",
                            "\ttriggerCharacters?: string[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Code Lens options.\n",
                            " */\n",
                            "interface CodeLensOptions {\n",
                            "\t/**\n",
                            "\t * Code lens has a resolve provider as well.\n",
                            "\t */\n",
                            "\tresolveProvider?: boolean;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Format document on type options\n",
                            " */\n",
                            "interface DocumentOnTypeFormattingOptions {\n",
                            "\t/**\n",
                            "\t * A character on which formatting should be triggered, like `}`.\n",
                            "\t */\n",
                            "\tfirstTriggerCharacter: string;\n",
                            "\t/**\n",
                            "\t * More trigger characters.\n",
                            "\t */\n",
                            "\tmoreTriggerCharacter?: string[]\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ServerCapabilities {\n",
                            "\t/**\n",
                            "\t * Defines how text documents are synced.\n",
                            "\t */\n",
                            "\ttextDocumentSync?: number;\n",
                            "\t/**\n",
                            "\t * The server provides hover support.\n",
                            "\t */\n",
                            "\thoverProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides completion support.\n",
                            "\t */\n",
                            "\tcompletionProvider?: CompletionOptions;\n",
                            "\t/**\n",
                            "\t * The server provides signature help support.\n",
                            "\t */\n",
                            "\tsignatureHelpProvider?: SignatureHelpOptions;\n",
                            "\t/**\n",
                            "\t * The server provides goto definition support.\n",
                            "\t */\n",
                            "\tdefinitionProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides find references support.\n",
                            "\t */\n",
                            "\treferencesProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides document highlight support.\n",
                            "\t */\n",
                            "\tdocumentHighlightProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides document symbol support.\n",
                            "\t */\n",
                            "\tdocumentSymbolProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides workspace symbol support.\n",
                            "\t */\n",
                            "\tworkspaceSymbolProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides code actions.\n",
                            "\t */\n",
                            "\tcodeActionProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides code lens.\n",
                            "\t */\n",
                            "\tcodeLensProvider?: CodeLensOptions;\n",
                            "\t/**\n",
                            "\t * The server provides document formatting.\n",
                            "\t */\n",
                            "\tdocumentFormattingProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides document range formatting.\n",
                            "\t */\n",
                            "\tdocumentRangeFormattingProvider?: boolean;\n",
                            "\t/**\n",
                            "\t * The server provides document formatting on typing.\n",
                            "\t */\n",
                            "\tdocumentOnTypeFormattingProvider?: DocumentOnTypeFormattingOptions;\n",
                            "\t/**\n",
                            "\t * The server provides rename support.\n",
                            "\t */\n",
                            "\trenameProvider?: boolean\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"shutdown\"></a>Shutdown Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "shutdown",
                            "params": "undefined"
                          },
                          "description": "The shutdown request is sent from the client to the server. It asks the server to shut down, but to not exit (otherwise the response might not be delivered correctly to the client). There is a separate exit notification that asks the server to exit."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "undefined",
                            "error": "code and message set in case an exception happens during shutdown request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"exit\"></a>Exit Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "exit",
                            "params": "undefined"
                          },
                          "description": "A notification to ask the server to exit its process.\nThe server should exit with `success` code 0 if the shutdown request has been received before; otherwise with `error` code 1."
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"window_showMessage\"></a>ShowMessage Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "window/showMessage",
                            "params": "`ShowMessageParams` defined as follows:"
                          },
                          "description": "The show message notification is sent from a server to a client to ask the client to display a particular message in the user interface."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ShowMessageParams {\n",
                            "\t/**\n",
                            "\t * The message type. See {@link MessageType}.\n",
                            "\t */\n",
                            "\ttype: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The actual message.\n",
                            "\t */\n",
                            "\tmessage: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "enum MessageType {\n",
                            "\t/**\n",
                            "\t * An error message.\n",
                            "\t */\n",
                            "\tError = 1,\n",
                            "\t/**\n",
                            "\t * A warning message.\n",
                            "\t */\n",
                            "\tWarning = 2,\n",
                            "\t/**\n",
                            "\t * An information message.\n",
                            "\t */\n",
                            "\tInfo = 3,\n",
                            "\t/**\n",
                            "\t * A log message.\n",
                            "\t */\n",
                            "\tLog = 4\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"window_showMessageRequest\"></a>ShowMessage Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "window/showMessageRequest",
                            "params": "`ShowMessageRequestParams` defined as follows:"
                          },
                          "description": ">**New:** The show message request is sent from a server to a client to ask the client to display a particular message in the user interface. In addition to the show message notification the request allows to pass actions and to wait for an answer from the client."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "the selected `MessageActionItem`",
                            "error": "code and message set in case an exception happens during showing a message."
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ShowMessageRequestParams {\n",
                            "\t/**\n",
                            "\t * The message type. See {@link MessageType}\n",
                            "\t */\n",
                            "\ttype: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The actual message\n",
                            "\t */\n",
                            "\tmessage: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The message action items to present.\n",
                            "\t */\n",
                            "\tactions?: MessageActionItem[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface MessageActionItem {\n",
                            "\t/**\n",
                            "\t * A short title like 'Retry', 'Open Log' etc.\n",
                            "\t */\n",
                            "\ttitle: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"window_logMessage\"></a>LogMessage Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "window/logMessage",
                            "params": "`LogMessageParams` defined as follows:"
                          },
                          "description": "The log message notification is sent from the server to the client to ask the client to log a particular message."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface LogMessageParams {\n",
                            "\t/**\n",
                            "\t * The message type. See {@link MessageType}\n",
                            "\t */\n",
                            "\ttype: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The actual message\n",
                            "\t */\n",
                            "\tmessage: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"telemetry_event\"></a>Telemetry Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "telemetry/event",
                            "params": "any"
                          },
                          "description": ">**New:** The telemetry notification is sent from the server to the client to ask the client to log a telemetry event."
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"workspace_didChangeConfiguration\"></a>DidChangeConfiguration Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "workspace/didChangeConfiguration",
                            "params": "`DidChangeConfigurationParams` defined as follows:"
                          },
                          "description": "A notification sent from the client to the server to signal the change of configuration settings."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidChangeConfigurationParams {\n",
                            "\t/**\n",
                            "\t * The actual changed settings\n",
                            "\t */\n",
                            "\tsettings: any;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_didOpen\"></a>DidOpenTextDocument Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "textDocument/didOpen",
                            "params": "`DidOpenTextDocumentParams` defined as follows:"
                          },
                          "description": "The document open notification is sent from the client to the server to signal newly opened text documents. The document's truth is now managed by the client and the server must not try to read the document's truth using the document's uri."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidOpenTextDocumentParams {\n",
                            "\t/**\n",
                            "\t * The document that was opened.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentItem;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_didChange\"></a>DidChangeTextDocument Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "textDocument/didChange",
                            "params": "`DidChangeTextDocumentParams` defined as follows:"
                          },
                          "description": ">**Changed:** The document change notification is sent from the client to the server to signal changes to a text document. In 2.0 the shape of the params has changed to include proper version numbers and language ids."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidChangeTextDocumentParams {\n",
                            "\t/**\n",
                            "\t * The document that did change. The version number points\n",
                            "\t * to the version after all provided content changes have\n",
                            "\t * been applied.\n",
                            "\t */\n",
                            "\ttextDocument: VersionedTextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The actual content changes.\n",
                            "\t */\n",
                            "\tcontentChanges: TextDocumentContentChangeEvent[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * An event describing a change to a text document. If range and rangeLength are omitted\n",
                            " * the new text is considered to be the full content of the document.\n",
                            " */\n",
                            "interface TextDocumentContentChangeEvent {\n",
                            "\t/**\n",
                            "\t * The range of the document that changed.\n",
                            "\t */\n",
                            "\trange?: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The length of the range that got replaced.\n",
                            "\t */\n",
                            "\trangeLength?: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The new text of the document.\n",
                            "\t */\n",
                            "\ttext: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_didClose\"></a>DidCloseTextDocument Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "textDocument/didClose",
                            "params": "`DidCloseTextDocumentParams` defined as follows:"
                          },
                          "description": "The document close notification is sent from the client to the server when the document got closed in the client. The document's truth now exists where the document's uri points to (e.g. if the document's uri is a file uri the truth now exists on disk).\n\n>**Changed:** In 2.0 the params are of type `DidCloseTextDocumentParams` which contains a reference to a text document."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidCloseTextDocumentParams {\n",
                            "\t/**\n",
                            "\t * The document that was closed.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_didSave\"></a>DidSaveTextDocument Notification",
                      "content": [
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidSaveTextDocumentParams {\n",
                            "\t/**\n",
                            "\t * The document that was saved.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "}\n"
                          ],
                          "description": [
                            "/**\n",
                            " * \n",
                            " * >**New:** The document save notification is sent from the client to the server when the document was saved in the client.\n",
                            " * \n",
                            " * * method: 'textDocument/didSave'\n",
                            " * * params: `DidSaveTextDocumentParams` defined as follows:\n",
                            " */\n"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"workspace_didChangeWatchedFiles\"></a>DidChangeWatchedFiles Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "workspace/didChangeWatchedFiles",
                            "params": "`DidChangeWatchedFilesParams` defined as follows:"
                          },
                          "description": "The watched files notification is sent from the client to the server when the client detects changes to files watched by the language client."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DidChangeWatchedFilesParams {\n",
                            "\t/**\n",
                            "\t * The actual file events.\n",
                            "\t */\n",
                            "\tchanges: FileEvent[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * The file event type.\n",
                            " */\n",
                            "enum FileChangeType {\n",
                            "\t/**\n",
                            "\t * The file got created.\n",
                            "\t */\n",
                            "\tCreated = 1,\n",
                            "\t/**\n",
                            "\t * The file got changed.\n",
                            "\t */\n",
                            "\tChanged = 2,\n",
                            "\t/**\n",
                            "\t * The file got deleted.\n",
                            "\t */\n",
                            "\tDeleted = 3\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * An event describing a file change.\n",
                            " */\n",
                            "interface FileEvent {\n",
                            "\t/**\n",
                            "\t * The file's URI.\n",
                            "\t */\n",
                            "\turi: string;\n",
                            "\t/**\n",
                            "\t * The change type.\n",
                            "\t */\n",
                            "\ttype: number;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_publishDiagnostics\"></a>PublishDiagnostics Notification",
                      "content": [
                        {
                          "type": "Notification",
                          "attrs": {
                            "method": "textDocument/publishDiagnostics",
                            "params": "`PublishDiagnosticsParams` defined as follows:"
                          },
                          "description": "Diagnostics notification are sent from the server to the client to signal results of validation runs."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface PublishDiagnosticsParams {\n",
                            "\t/**\n",
                            "\t * The URI for which diagnostic information is reported.\n",
                            "\t */\n",
                            "\turi: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * An array of diagnostic information items.\n",
                            "\t */\n",
                            "\tdiagnostics: Diagnostic[];\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_completion\"></a>Completion Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/completion",
                            "params": "[`TextDocumentPositionParams`](#textdocumentpositionparams)"
                          },
                          "description": "The Completion request is sent from the client to the server to compute completion items at a given cursor position. Completion items are presented in the [IntelliSense](https://code.visualstudio.com/docs/editor/editingevolved#_intellisense) user interface. If computing full completion items is expensive, servers can additionally provide a handler for the completion item resolve request ('completionItem/resolve'). This request is sent when a completion item is selected in the user interface. A typically use case is for example: the 'textDocument/completion' request doesn't fill in the `documentation` property for returned completion items since it is expensive to compute. When the item is selected in the user interface then a 'completionItem/resolve' request is sent with the selected completion item as a param. The returned completion item should have the documentation property filled in.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with a proper `textDocument` and `position` property. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`CompletionItem[] | CompletionList`"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Represents a collection of [completion items](#CompletionItem) to be presented\n",
                            " * in the editor.\n",
                            " */\n",
                            "interface CompletionList {\n",
                            "\t/**\n",
                            "\t * This list it not complete. Further typing should result in recomputing\n",
                            "\t * this list.\n",
                            "\t */\n",
                            "\tisIncomplete: boolean;\n",
                            "\t/**\n",
                            "\t * The completion items.\n",
                            "\t */\n",
                            "\titems: CompletionItem[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface CompletionItem {\n",
                            "\t/**\n",
                            "\t * The label of this completion item. By default\n",
                            "\t * also the text that is inserted when selecting\n",
                            "\t * this completion.\n",
                            "\t */\n",
                            "\tlabel: string;\n",
                            "\t/**\n",
                            "\t * The kind of this completion item. Based of the kind\n",
                            "\t * an icon is chosen by the editor.\n",
                            "\t */\n",
                            "\tkind?: number;\n",
                            "\t/**\n",
                            "\t * A human-readable string with additional information\n",
                            "\t * about this item, like type or symbol information.\n",
                            "\t */\n",
                            "\tdetail?: string;\n",
                            "\t/**\n",
                            "\t * A human-readable string that represents a doc-comment.\n",
                            "\t */\n",
                            "\tdocumentation?: string;\n",
                            "\t/**\n",
                            "\t * A string that should be used when comparing this item\n",
                            "\t * with other items. When `falsy` the label is used.\n",
                            "\t */\n",
                            "\tsortText?: string;\n",
                            "\t/**\n",
                            "\t * A string that should be used when filtering a set of\n",
                            "\t * completion items. When `falsy` the label is used.\n",
                            "\t */\n",
                            "\tfilterText?: string;\n",
                            "\t/**\n",
                            "\t * A string that should be inserted a document when selecting\n",
                            "\t * this completion. When `falsy` the label is used.\n",
                            "\t */\n",
                            "\tinsertText?: string;\n",
                            "\t/**\n",
                            "\t * An edit which is applied to a document when selecting\n",
                            "\t * this completion. When an edit is provided the value of\n",
                            "\t * insertText is ignored.\n",
                            "\t */\n",
                            "\ttextEdit?: TextEdit;\n",
                            "\t/**\n",
                            "\t * An optional array of additional text edits that are applied when\n",
                            "\t * selecting this completion. Edits must not overlap with the main edit\n",
                            "\t * nor with themselves.\n",
                            "\t */\n",
                            "\tadditionalTextEdits?: TextEdit[];\n",
                            "\t/**\n",
                            "\t * An optional command that is executed *after* inserting this completion. *Note* that\n",
                            "\t * additional modifications to the current document should be described with the\n",
                            "\t * additionalTextEdits-property.\n",
                            "\t */\n",
                            "\tcommand?: Command;\n",
                            "\t/**\n",
                            "\t * An data entry field that is preserved on a completion item between\n",
                            "\t * a completion and a completion resolve request.\n",
                            "\t */\n",
                            "\tdata?: any\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * The kind of a completion entry.\n",
                            " */\n",
                            "enum CompletionItemKind {\n",
                            "\tText = 1,\n",
                            "\tMethod = 2,\n",
                            "\tFunction = 3,\n",
                            "\tConstructor = 4,\n",
                            "\tField = 5,\n",
                            "\tVariable = 6,\n",
                            "\tClass = 7,\n",
                            "\tInterface = 8,\n",
                            "\tModule = 9,\n",
                            "\tProperty = 10,\n",
                            "\tUnit = 11,\n",
                            "\tValue = 12,\n",
                            "\tEnum = 13,\n",
                            "\tKeyword = 14,\n",
                            "\tSnippet = 15,\n",
                            "\tColor = 16,\n",
                            "\tFile = 17,\n",
                            "\tReference = 18\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"completionItem_resolve\"></a>Completion Item Resolve Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "completionItem/resolve",
                            "params": "`CompletionItem`"
                          },
                          "description": "The request is sent from the client to the server to resolve additional information for a given completion item."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`CompletionItem`",
                            "error": "code and message set in case an exception happens during the completion resolve request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_hover\"></a>Hover Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/hover",
                            "params": "[`TextDocumentPositionParams`](#textdocumentpositionparams)"
                          },
                          "description": "The hover request is sent from the client to the server to request hover information at a given text document position.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with a proper `textDocument` and `position` property. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`Hover` defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * The result of a hover request.\n",
                            " */\n",
                            "interface Hover {\n",
                            "\t/**\n",
                            "\t * The hover's content\n",
                            "\t */\n",
                            "\tcontents: MarkedString | MarkedString[];\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * An optional range is a range inside a text document \n",
                            "\t * that is used to visualize a hover, e.g. by changing the background color.\n",
                            "\t */\n",
                            "\trange?: Range;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * The marked string is rendered:\n",
                            " * - as markdown if it is represented as a string\n",
                            " * - as code block of the given language if it is represented as a pair of a language and a value\n",
                            " *\n",
                            " * The pair of a language and a value is an equivalent to markdown:\n",
                            " * ```${language}\n",
                            " * ${value}\n",
                            " * ```\n",
                            " */\n",
                            "type MarkedString = string | { language: string; value: string };\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_signatureHelp\"></a>Signature Help Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/signatureHelp",
                            "params": "[`TextDocumentPositionParams`](#textdocumentpositionparams)"
                          },
                          "description": "The signature help request is sent from the client to the server to request signature information at a given cursor position.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with proper `textDocument` and `position` properties. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`SignatureHelp` defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Signature help represents the signature of something\n",
                            " * callable. There can be multiple signature but only one\n",
                            " * active and only one active parameter.\n",
                            " */\n",
                            "interface SignatureHelp {\n",
                            "\t/**\n",
                            "\t * One or more signatures.\n",
                            "\t */\n",
                            "\tsignatures: SignatureInformation[];\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The active signature.\n",
                            "\t */\n",
                            "\tactiveSignature?: number;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The active parameter of the active signature.\n",
                            "\t */\n",
                            "\tactiveParameter?: number;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Represents the signature of something callable. A signature\n",
                            " * can have a label, like a function-name, a doc-comment, and\n",
                            " * a set of parameters.\n",
                            " */\n",
                            "interface SignatureInformation {\n",
                            "\t/**\n",
                            "\t * The label of this signature. Will be shown in\n",
                            "\t * the UI.\n",
                            "\t */\n",
                            "\tlabel: string;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The human-readable doc-comment of this signature. Will be shown\n",
                            "\t * in the UI but can be omitted.\n",
                            "\t */\n",
                            "\tdocumentation?: string;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The parameters of this signature.\n",
                            "\t */\n",
                            "\tparameters?: ParameterInformation[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Represents a parameter of a callable-signature. A parameter can\n",
                            " * have a label and a doc-comment.\n",
                            " */\n",
                            "interface ParameterInformation {\n",
                            "\t/**\n",
                            "\t * The label of this parameter. Will be shown in\n",
                            "\t * the UI.\n",
                            "\t */\n",
                            "\tlabel: string;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The human-readable doc-comment of this parameter. Will be shown\n",
                            "\t * in the UI but can be omitted.\n",
                            "\t */\n",
                            "\tdocumentation?: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_definition\"></a>Goto Definition Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/definition",
                            "params": "[`TextDocumentPositionParams`](#textdocumentpositionparams)"
                          },
                          "description": "The goto definition request is sent from the client to the server to resolve the definition location of a symbol at a given text document position.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with proper `textDocument` and `position` properties. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`Location`](#location) | [`Location`](#location)[]",
                            "error": "code and message set in case an exception happens during the definition request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_references\"></a>Find References Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/references",
                            "params": "`ReferenceParams` defined as follows:"
                          },
                          "description": "The references request is sent from the client to the server to resolve project-wide references for the symbol denoted by the given text document position.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with proper `textDocument` and `position` properties. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ReferenceParams extends TextDocumentPositionParams {\n",
                            "\tcontext: ReferenceContext\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface ReferenceContext {\n",
                            "\t/**\n",
                            "\t * Include the declaration of the current symbol.\n",
                            "\t */\n",
                            "\tincludeDeclaration: boolean;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`Location`](#location)[]",
                            "error": "code and message set in case an exception happens during the reference request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_documentHighlight\"></a>Document Highlights Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/documentHighlight",
                            "params": "[`TextDocumentPositionParams`](#textdocumentpositionparams)"
                          },
                          "description": "The document highlight request is sent from the client to the server to resolve a document highlights for a given text document position.\nFor programming languages this usually highlights all references to the symbol scoped to this file. However we kept 'textDocument/documentHighlight' \nand 'textDocument/references' separate requests since the first one is allowed to be more fuzzy. Symbol matches usually have a `DocumentHighlightKind`\nof `Read` or `Write` whereas fuzzy or textual matches use `Text`as the kind.\n\n>**Changed:** In 2.0 the request uses `TextDocumentPositionParams` with proper `textDocument` and `position` properties. In 1.0 the uri of the referenced text document was inlined into the params object."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`DocumentHighlight`[] defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * A document highlight is a range inside a text document which deserves\n",
                            " * special attention. Usually a document highlight is visualized by changing\n",
                            " * the background color of its range.\n",
                            " * \n",
                            " */\n",
                            "interface DocumentHighlight {\n",
                            "\t/**\n",
                            "\t * The range this highlight applies to.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The highlight kind, default is DocumentHighlightKind.Text.\n",
                            "\t */\n",
                            "\tkind?: number;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * A document highlight kind.\n",
                            " */\n",
                            "enum DocumentHighlightKind {\n",
                            "\t/**\n",
                            "\t * A textual occurrence.\n",
                            "\t */\n",
                            "\tText = 1,\n",
                            "\n",
                            "\t/**\n",
                            "\t * Read-access of a symbol, like reading a variable.\n",
                            "\t */\n",
                            "\tRead = 2,\n",
                            "\n",
                            "\t/**\n",
                            "\t * Write-access of a symbol, like writing to a variable.\n",
                            "\t */\n",
                            "\tWrite = 3\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_documentSymbol\"></a>Document Symbols Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/documentSymbol",
                            "params": "`DocumentSymbolParams` defined as follows:"
                          },
                          "description": "The document symbol request is sent from the client to the server to list all symbols found in a given text document.\n\n>**Changed:** In 2.0 the request uses `DocumentSymbolParams` instead of a single uri."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DocumentSymbolParams {\n",
                            "\t/**\n",
                            "\t * The text document.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`SymbolInformation`[] defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Represents information about programming constructs like variables, classes,\n",
                            " * interfaces etc.\n",
                            " */\n",
                            "interface SymbolInformation {\n",
                            "\t/**\n",
                            "\t * The name of this symbol.\n",
                            "\t */\n",
                            "\tname: string;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The kind of this symbol.\n",
                            "\t */\n",
                            "\tkind: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The location of this symbol.\n",
                            "\t */\n",
                            "\tlocation: Location;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The name of the symbol containing this symbol.\n",
                            "\t */\n",
                            "\tcontainerName?: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * A symbol kind.\n",
                            " */\n",
                            "export enum SymbolKind {\n",
                            "\tFile = 1,\n",
                            "\tModule = 2,\n",
                            "\tNamespace = 3,\n",
                            "\tPackage = 4,\n",
                            "\tClass = 5,\n",
                            "\tMethod = 6,\n",
                            "\tProperty = 7,\n",
                            "\tField = 8,\n",
                            "\tConstructor = 9,\n",
                            "\tEnum = 10,\n",
                            "\tInterface = 11,\n",
                            "\tFunction = 12,\n",
                            "\tVariable = 13,\n",
                            "\tConstant = 14,\n",
                            "\tString = 15,\n",
                            "\tNumber = 16,\n",
                            "\tBoolean = 17,\n",
                            "\tArray = 18,\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"workspace_symbol\"></a>Workspace Symbols Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "workspace/symbol",
                            "params": "`WorkspaceSymbolParams` defined as follows:"
                          },
                          "description": "The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * The parameters of a Workspace Symbol Request.\n",
                            " */\n",
                            "interface WorkspaceSymbolParams {\n",
                            "\t/**\n",
                            "\t * A non-empty query string\n",
                            "\t */\n",
                            "\tquery: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`SymbolInformation[]` as defined above.",
                            "error": "code and message set in case an exception happens during the workspace symbol request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_codeAction\"></a>Code Action Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/codeAction",
                            "params": "`CodeActionParams` defined as follows:"
                          },
                          "description": "The code action request is sent from the client to the server to compute commands for a given text document and range. The request is triggered when the user moves the cursor into a problem marker in the editor or presses the lightbulb associated with a marker."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Params for the CodeActionRequest\n",
                            " */\n",
                            "interface CodeActionParams {\n",
                            "\t/**\n",
                            "\t * The document in which the command was invoked.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The range for which the command was invoked.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * Context carrying additional information.\n",
                            "\t */\n",
                            "\tcontext: CodeActionContext;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Contains additional diagnostic information about the context in which\n",
                            " * a code action is run.\n",
                            " */\n",
                            "interface CodeActionContext {\n",
                            "\t/**\n",
                            "\t * An array of diagnostics.\n",
                            "\t */\n",
                            "\tdiagnostics: Diagnostic[];\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`Command[]`](#command) defined as follows:",
                            "error": "code and message set in case an exception happens during the code action request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_codeLens\"></a>Code Lens Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/codeLens",
                            "params": "`CodeLensParams` defined as follows:"
                          },
                          "description": "The code lens request is sent from the client to the server to compute code lenses for a given text document.\n\n>**Changed:** In 2.0 the request uses `CodeLensParams` instead of a single uri."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface CodeLensParams {\n",
                            "\t/**\n",
                            "\t * The document to request code lens for.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`CodeLens[]` defined as follows:"
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * A code lens represents a command that should be shown along with\n",
                            " * source text, like the number of references, a way to run tests, etc.\n",
                            " *\n",
                            " * A code lens is _unresolved_ when no command is associated to it. For performance\n",
                            " * reasons the creation of a code lens and resolving should be done in two stages.\n",
                            " */\n",
                            "interface CodeLens {\n",
                            "\t/**\n",
                            "\t * The range in which this code lens is valid. Should only span a single line.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The command this code lens represents.\n",
                            "\t */\n",
                            "\tcommand?: Command;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * A data entry field that is preserved on a code lens item between\n",
                            "\t * a code lens and a code lens resolve request.\n",
                            "\t */\n",
                            "\tdata?: any\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"codeLens_resolve\"></a>Code Lens Resolve Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "codeLens/resolve",
                            "params": "`CodeLens`"
                          },
                          "description": "The code lens resolve request is sent from the client to the server to resolve the command for a given code lens item."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`CodeLens`",
                            "error": "code and message set in case an exception happens during the code lens resolve request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_documentLink\"></a>Document Link Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/documentLink",
                            "params": "`DocumentLinkParams`, defined as follows"
                          },
                          "description": "The document links request is sent from the client to the server to request the location of links in a document."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DocumentLinkParams {\n",
                            "\t/**\n",
                            "\t * The document to provide document links for.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "An array of `DocumentLink`, or `null` or `undefined`."
                          },
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "",
                          "lines": [
                            "/**\n",
                            " * A document link is a range in a text document that links to an internal or external resource, like another\n",
                            " * text document or a web site.\n",
                            " */\n",
                            "interface DocumentLink {\n",
                            "\t/**\n",
                            "\t * The range this link applies to.\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\t/**\n",
                            "\t * The uri this link points to.\n",
                            "\t */\n",
                            "\ttarget: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"documentLink_resolve\"></a>Document Link Resolve Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "documentLink/resolve",
                            "params": "`DocumentLink`"
                          },
                          "description": "The document link resolve request is sent from the client to the server to resolve the target of a given document link."
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "`DocumentLink`",
                            "error": "code and message set in case an exception happens during the document link resolve request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_formatting\"></a>Document Formatting Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/formatting",
                            "params": "`DocumentFormattingParams` defined as follows"
                          },
                          "description": "The document formatting request is sent from the server to the client to format a whole document."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DocumentFormattingParams {\n",
                            "\t/**\n",
                            "\t * The document to format.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The format options.\n",
                            "\t */\n",
                            "\toptions: FormattingOptions;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "/**\n",
                            " * Value-object describing what options formatting should use.\n",
                            " */\n",
                            "interface FormattingOptions {\n",
                            "\t/**\n",
                            "\t * Size of a tab in spaces.\n",
                            "\t */\n",
                            "\ttabSize: number;\n",
                            "\n",
                            "\t/**\n",
                            "\t * Prefer spaces over tabs.\n",
                            "\t */\n",
                            "\tinsertSpaces: boolean;\n",
                            "\n",
                            "\t/**\n",
                            "\t * Signature for further properties.\n",
                            "\t */\n",
                            "\t[key: string]: boolean | number | string;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`TextEdit[]`](#textedit) describing the modification to the document to be formatted.",
                            "error": "code and message set in case an exception happens during the formatting request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_rangeFormatting\"></a>Document Range Formatting Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/rangeFormatting",
                            "params": "`DocumentRangeFormattingParams` defined as follows"
                          },
                          "description": "The document range formatting request is sent from the client to the server to format a given range in a document."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DocumentRangeFormattingParams {\n",
                            "\t/**\n",
                            "\t * The document to format.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The range to format\n",
                            "\t */\n",
                            "\trange: Range;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The format options\n",
                            "\t */\n",
                            "\toptions: FormattingOptions;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`TextEdit[]`](#textedit) describing the modification to the document to be formatted.",
                            "error": "code and message set in case an exception happens during the range formatting request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_onTypeFormatting\"></a>Document on Type Formatting Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/onTypeFormatting",
                            "params": "`DocumentOnTypeFormattingParams` defined as follows"
                          },
                          "description": "The document on type formatting request is sent from the client to the server to format parts of the document during typing."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface DocumentOnTypeFormattingParams {\n",
                            "\t/**\n",
                            "\t * The document to format.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The position at which this request was sent.\n",
                            "\t */\n",
                            "\tposition: Position;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The character that has been typed.\n",
                            "\t */\n",
                            "\tch: string;\n",
                            "\t\n",
                            "\t/**\n",
                            "\t * The format options.\n",
                            "\t */\n",
                            "\toptions: FormattingOptions;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`TextEdit[]`](#textedit) describing the modification to the document.",
                            "error": "code and message set in case an exception happens during the range formatting request."
                          },
                          "description": ""
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "title": "#### <a name=\"textDocument_rename\"></a>Rename Request",
                      "content": [
                        {
                          "type": "Request",
                          "attrs": {
                            "method": "textDocument/rename",
                            "params": "`RenameParams` defined as follows"
                          },
                          "description": "The rename request is sent from the client to the server to perform a workspace-wide rename of a symbol."
                        },
                        {
                          "type": "code",
                          "language": "typescript",
                          "lines": [
                            "interface RenameParams {\n",
                            "\t/**\n",
                            "\t * The document to format.\n",
                            "\t */\n",
                            "\ttextDocument: TextDocumentIdentifier;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The position at which this request was sent.\n",
                            "\t */\n",
                            "\tposition: Position;\n",
                            "\n",
                            "\t/**\n",
                            "\t * The new name of the symbol. If the given name is not valid the\n",
                            "\t * request must return a [ResponseError](#ResponseError) with an\n",
                            "\t * appropriate message set.\n",
                            "\t */\n",
                            "\tnewName: string;\n",
                            "}\n"
                          ],
                          "description": ""
                        },
                        {
                          "type": "Response",
                          "attrs": {
                            "result": "[`WorkspaceEdit`](#workspaceedit) describing the modification to the workspace.",
                            "error": "code and message set in case an exception happens during the rename request."
                          },
                          "description": ""
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        }
      ]
    ]
  }
]